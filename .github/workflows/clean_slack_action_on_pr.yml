name: PR status

on:
  pull_request:
    branches: [ master ]

  workflow_dispatch:

jobs:
  slack:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - id: checkout
    
    - name: Print common data
      id: common-step
      run: |
        echo "Reviewers: ${{toJSON(github.event.pull_request.head.repo.requested_reviewers)}},\nRepo url: ${{github.event.pull_request.head.repo.url}},\nTitle: ${{github.event.pull_request.title}},\nAvatar url:${{github.event.pull_request.head.user.avatar_url}}, "

    - name: Print PR data
      id: print-repo-data
      run: |
        echo "PR_data: ${{toJSON(github.event.pull_request._links.html.href)}}"
        echo "PR_data_full: ${{toJSON(github.event.pull_request)}}"
        
    - name: Notify PR status in Slack
      id: slack-simple
      env:
        SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
      uses: pullreminders/slack-action@master
      with:
          args: '{\"channel\":\"C02E6Q6HAKV\",\"attachments\":[{\"pretext\":\"SIMPLE Creator: ${{github.event.pull_request.head.user.login}}\",\"text\": \"PR title: ${{github.event.pull_request.title}}\nReviewers: ${{github.event.pull_request.head.repo.requested_reviewers}}\n PR link: ${{github.event.pull_request.head.repo.url}} \" }]}'
          
    - name: Failure step
      id: failure-step
      run: ./gradle some
      
    - name: Collect statuses
      if: always()
      env:
        ACTIONS_ALLOW_UNSECURE_COMMANDS: 'true'
      id: collect-statuses
      run: |
          echo "${{toJSON(steps)}}"
          
          echo "${{steps.common.outcome}}"
          if [ ${{steps.common.outcome}} == success ]; then
            export common_result=:white_check_mark:
            echo "::set-env name=common_result::$common_result"
            echo "flag set to :white_check_mark:"
          fi
          
          echo "${{steps.slack-simple.outcome}}"
          if [ ${{steps.slack-simple.conclusion}} == 'success' ]; then
            export slack_simple_result=:white_check_mark:
            echo "::set-env name=slack_simple_result::$slack_simple_result"
            echo "flag set to :white_check_mark:"
          fi
          
          echo "${{steps.failure-step.outcome}}"
          if [ ${{steps.failure-step.conclusion}} == 'success' ]; then
            export failure_step_result=:white_check_mark:
            echo "::set-env name=failure_step_result::$failure_step_result"
            echo "flag set to :white_check_mark:"
          else 
            export failure_step_result=:x:
            echo "::set-env name=failure_step_result::$failure_step_result"
            echo "flag set to :x:";
          fi
          
    - name: Test loops in bash
      if: always()
      id: build-statuses-string
      run: |    
         transformedSteps="$( echo '${{toJSON(steps)}}' | jq -r 'to_entries|map(.key=.key)' )"
         statusesString=""
         
         for row in $(echo "$transformedSteps" | jq -r '. | .[] | @base64'); do 
            _jq() { 
              echo "${row}" | base64 --decode | jq -r "${1}"; 
           };
           _prepareKeyLength() {
              id=${1}
              if [ ${#1} < 25 ]; then 
                countOfMissingChars=$(expr 25 - ${#1}) ; 
                printf -v padding %${countOfMissingChars}s;
                final="$padding${1}"; 
                echo ${final};
              else 
                echo ${id:0:40};
              fi
           };
           key=$(_jq '.key'); 
           echo "key before=[$key], length=${#key}"
           key=$(_prepareKeyLength $key);
           echo "key after=[$key], length=${#key}"
           value=$(_jq '.value.outcome');
           echo "key=$key, value=$value"
           if [ $value == 'success' ]; then
             value=:white_check_mark:
           else 
             value=:x:
           fi
           statusesString="${statusesString}*$key* | $value\n"; 
         done
         echo "statusesString=$statusesString"
         echo '::set-output name=statusesR1esult::${statusesString}'
         echo "statusesResult=$statusesString" >> $GITHUB_ENV
         
         someVar=$( echo '${{toJSON(steps)}}' | jq -r 'to_entries|map(.key=.key)' )
         echo "someVar=$someVar"
         
         echo "------------------Keys---------------------"
         
         echo "${someVar}" | jq '.[]."key"'         
         
         echo "------------------Values---------------------"
         
         echo "${someVar}" | jq '.[]."value"."outcome"'  
                 
    - name: Print env
      if: always()
      run: | 
        echo "${{toJSON(steps)}}"
          
    - name: Send pretty PR info
      if: always()
      env:
        SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
      uses: pullreminders/slack-action@master
      with:
          args: '{\"channel\":\"C02E6Q6HAKV\",\"blocks\":[{\"type\":\"section\",\"text\":{\"type\":\"mrkdwn\",\"text\":\"Hey guys :aw_yeah: \n Please review my PR. *If you do this fast, I will give you the huge Kudos :heart:*\"}},{\"type\":\"divider\"},{\"type\":\"section\",\"text\":{\"type\":\"mrkdwn\",\"text\":\"*<${{toJSON(github.event.pull_request._links.html.href)}}|${{github.event.pull_request.title}}>*\nList of reviewers: ${{toJSON(github.event.pull_request.requested_reviewers)}}\nJira ticket: !!Jira ticket!!\nCommits count: ${{github.event.pull_request.commits}}\"},\"accessory\":{\"type\":\"image\",\"image_url\":\"${{github.event.pull_request.head.user.avatar_url}}\",\"alt_text\":\"Creator Image\"}},{\"type\":\"divider\"},{\"type\":\"section\",\"text\":{\"type\":\"mrkdwn\",\"text\":\"*Tests execution results*\"}},{\"type\":\"section\",\"text\":{\"type\":\"mrkdwn\",\"text\":\"${{env.statusesResult}} \"}}]}'
